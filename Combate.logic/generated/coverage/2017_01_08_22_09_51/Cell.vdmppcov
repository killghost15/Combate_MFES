class Cell
types
	public Position :: x:nat y:nat;
values
instance variables
	private position : Position;
	private piece :  [Piece] := nil;
	private water : bool := false;
	private occupied : bool := false;

	inv occupied => piece <> nil;
	inv water => piece = nil and occupied = false;
operations
	-- Construtor
	public Cell : nat * nat ==> Cell
  	Cell(x,y) ==
  	(
  		position := mk_Position(x,y);
  		water := isWater(position);
		);
	
	-- Coloca uma peça numa casa
	public setPiece : Piece ==> ()
		setPiece(pie) == 
		(
			atomic(
				piece := pie;
				occupied := true;
				)
		)
		pre occupied = false and piece = nil and water = false
		post occupied = true and piece <> nil;
	
	-- Remove uma peça do tabuleiro
	public removePiece : () ==> ()
		removePiece() == 
		(
			atomic(
				piece := nil;
				occupied := false;
			)
		)
		pre occupied = true and piece <> nil and water = false
		post occupied = false and piece = nil;
	
	-- Retorna a posição da casa
	public getPosition : () ==> Position
		getPosition() == 
		(
			return position;
		);
	
	-- Verdadeiro se a casa estiver ocupada ou for um lago, false otherwise
	public pure isOccupied : () ==> bool
		isOccupied() == return occupied or water;
	
	-- Retorna a peça que está na casa
	public pure getPiece : () ==> [Piece]
		getPiece() == return piece;
	
	-- Define as casas que são lagos
	public pure isWater : Position ==> bool
		isWater(pos) ==
		(
			return (pos.x = 2 or pos.x = 3 or pos.x = 6 or pos.x = 7) and (pos.y = 4 or pos.y = 5);
		);
	
	-- Verdadeiro se a casa for um lago, false otherwise
	public pure getWater : () ==> bool
		getWater() == return water;
	

functions
traces
end Cell